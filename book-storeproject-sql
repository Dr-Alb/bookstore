-- Create the database
CREATE DATABASE BookStore;
USE BookStore;


/*....creating the tables*/

/*table1*/
CREATE TABLE book (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    isbn VARCHAR(13) UNIQUE NOT NULL,
    publication_year YEAR,
    publisher_id INT,
    language_id INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
    FOREIGN KEY (language_id) REFERENCES book_language(language_id)
);

/*table2*/
CREATE TABLE author (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100)

);

/*table3*/

CREATE TABLE book_author (
    book_id INT,
    author_id INT,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id),
    FOREIGN KEY (author_id) REFERENCES author(author_id)
);

/*table4*/

CREATE TABLE book_language (
    language_id INT AUTO_INCREMENT PRIMARY KEY,
    language_name VARCHAR(50) NOT NULL
);


/*table5*/

CREATE TABLE publisher (
    publisher_id INT AUTO_INCREMENT PRIMARY KEY,
    publisher_name VARCHAR(255) NOT NULL
);


/*table6*/

CREATE TABLE customer (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(15)
);


/*table7*/
CREATE TABLE customer_address (
    customer_id INT,
    address_id INT,
    address_status_id INT,
    PRIMARY KEY (customer_id, address_id),
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (address_id) REFERENCES address(address_id),
    FOREIGN KEY (address_status_id) REFERENCES address_status(address_status_id)
);


/*table8*/

CREATE TABLE address_status (
    address_status_id INT AUTO_INCREMENT PRIMARY KEY,
    status_name VARCHAR(50) NOT NULL
);


/*table9*/

CREATE TABLE address (
    address_id INT AUTO_INCREMENT PRIMARY KEY,
    street_address VARCHAR(255),
    city VARCHAR(100),
    state VARCHAR(100),
    postal_code VARCHAR(20),
    country_id INT,
    FOREIGN KEY (country_id) REFERENCES country(country_id)
);


/*table10*/

CREATE TABLE country (
    country_id INT AUTO_INCREMENT PRIMARY KEY,
    country_name VARCHAR(100) NOT NULL
);
/*table11*/

CREATE TABLE cust_order (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATETIME NOT NULL,
    shipping_method_id INT,
    order_status_id INT,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (shipping_method_id) REFERENCES shipping_method(shipping_method_id),
    FOREIGN KEY (order_status_id) REFERENCES order_status(order_status_id)
);


/*table12*/

CREATE TABLE order_line (
    order_line_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    book_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id)
);


/*table13*/

CREATE TABLE shipping_method (
    shipping_method_id INT AUTO_INCREMENT PRIMARY KEY,
    method_name VARCHAR(100) NOT NULL
);


/*table14*/

CREATE TABLE order_history (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    status_change_date DATETIME NOT NULL,
    order_status_id INT,
    FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
    FOREIGN KEY (order_status_id) REFERENCES order_status(order_status_id)
);


/*table15*/

CREATE TABLE order_status (
    order_status_id INT AUTO_INCREMENT PRIMARY KEY,
    status_name VARCHAR(50) NOT NULL
);


/*SAMPLE INSERT STATEMENTS*/

.....Insert into book_language......

INSERT INTO book_language (language_name)
 VALUES ('English'), ('kiswahili'), ('French');

 ....publisher......
 INSERT INTO publisher (publisher_name) 
 VALUES ('longhornpublishers'), ('HarperCollins'), ('Sipoi publishers');

 ....book....
 INSERT INTO book (title, isbn, publication_year, publisher_id, language_id, price)
VALUES 
('THE CAMPUS EXILE', '9781234567890', 2020, 1, 1, 19.99),
('THE ECHOES OF WAR', '9780987654321', 2025, 2, 2, 25.50);

....author....
INSERT INTO author (first_name, last_name)
 VALUES ('Collins', 'Ongoma'), ('Cleophas', 'Malala');

 ...book_author...
 INSERT INTO book_author (book_id, author_id) 
 VALUES (1, 1), (2, 2);

 ....customer....
 INSERT INTO customer (first_name, last_name, email, phone_number)
VALUES ('Albert', 'kujua', 'albsipoi1564@gmail.com', '0706653253');


....country......
INSERT INTO country (country_name) 
VALUES ('kenya'), ('Rwanda');


.....address.....
INSERT INTO address (street_address, city, state, postal_code, country_id)
VALUES ('120 mgd', 'Nairobi', 'N/A', '00205', 1);

....customer_address....
INSERT INTO customer_address (customer_id, address_id, address_status_id)
VALUES (1, 1, 1);


....cust_order.....
INSERT INTO cust_order (customer_id, order_date, shipping_method_id, order_status_id)
VALUES (1, '2025-04-12 10:00:00', 1, 1);

.....order_line....
INSERT INTO order_line (order_id, book_id, quantity, price)
VALUES (1, 1, 2, 39.98);



/*TEST QUERIES*/

          Query 1: Retrieve all books and their authors

SELECT b.title, a.first_name, a.last_name
FROM book b
JOIN book_author ba ON b.book_id = ba.book_id
JOIN author a ON ba.author_id = a.author_id;

          Query 2: Retrieve all orders with their statuses

SELECT o.order_id, o.order_date, os.status_name
FROM cust_order o
JOIN order_status os ON o.order_status_id = os.order_status_id;

         Query 3: Aggregate function to calculate total sales

SELECT SUM(price * quantity) AS total_sales
FROM order_line;